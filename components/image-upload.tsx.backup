"use client"

import { useState, useRef } from "react"
import { Button } from "@/components/ui/button"
import { Upload, X, Image as ImageIcon } from "lucide-react"
import Image from "next/image"

interface ImageUploadProps {
  slideNumber: number
  currentImageUrl?: string
  onImageUploaded: (imageUrl: string) => void
}

export function ImageUpload({ slideNumber, currentImageUrl, onImageUploaded }: ImageUploadProps) {
  const [isUploading, setIsUploading] = useState(false)
  const [uploadError, setUploadError] = useState<string | null>(null)
  const [uploadSuccess, setUploadSuccess] = useState(false)
  const fileInputRef = useRef<HTMLInputElement>(null)

  const handleImageClick = () => {
    fileInputRef.current?.click()
  }

  // Simple client-side file to data URL conversion
  const convertFileToDataUrl = (file: File): Promise<string> => {
    return new Promise((resolve, reject) => {
      const reader = new FileReader()
      reader.onload = () => {
        resolve(reader.result as string)
      }
      reader.onerror = () => {
        reject(new Error('Failed to read file'))
      }
      reader.readAsDataURL(file)
    })
  }

  const handleFileChange = async (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0]
    if (!file) return

    // Validate file type
    if (!file.type.startsWith('image/')) {
      setUploadError('Please select an image file')
      return
    }

    // Validate file size (max 5MB for client-side processing)
    if (file.size > 5 * 1024 * 1024) {
      setUploadError('File size must be less than 5MB')
      return
    }

    setIsUploading(true)
    setUploadError(null)
    setUploadSuccess(false)

    try {
      // Process image entirely in the browser - no server communication
      const dataUrl = await convertFileToDataUrl(file)
      
      // Use the data URL directly
      onImageUploaded(dataUrl)
      setUploadSuccess(true)
      
      // Clear success message after 3 seconds
      setTimeout(() => setUploadSuccess(false), 3000)
    } catch (error) {
      console.error('Image processing error:', error)
      setUploadError(error instanceof Error ? error.message : 'Failed to process image')
    } finally {
      setIsUploading(false)
    }
  }

  const handleRemoveImage = () => {
    // No server call needed - just clear the image
    onImageUploaded('')
  }

  return (
    <div className="relative group">
      {/* Hidden file input */}
      <input
        ref={fileInputRef}
        type="file"
        accept="image/*"
        onChange={handleFileChange}
        className="hidden"
      />

      {/* Image display area */}
      <div 
        className="relative w-full h-full min-h-[120px] bg-gray-100 border-2 border-dashed border-gray-300 rounded-lg flex items-center justify-center cursor-pointer hover:border-blue-400 hover:bg-gray-50 transition-colors"
        onClick={handleImageClick}
        style={{ width: '100%' }}
      >
        {currentImageUrl ? (
          <>
            <Image
              src={currentImageUrl}
              alt={`Slide ${slideNumber} content`}
              width={120}
              height={80}
              className="object-cover rounded-lg max-w-full max-h-full"
            />
            {/* Remove button overlay */}
            <Button
              size="sm"
              variant="destructive"
              className="absolute top-2 right-2 opacity-0 group-hover:opacity-100 transition-opacity"
              onClick={(e) => {
                e.stopPropagation()
                handleRemoveImage()
              }}
            >
              <X size={16} />
            </Button>
          </>
        ) : (
                      <div className="text-center">
              <ImageIcon className="mx-auto h-8 w-8 text-gray-400 mb-2" />
              <p className="text-sm text-gray-500">
                {isUploading ? 'Processing...' : 'Click to add image'}
              </p>
              {uploadError && (
                <p className="text-xs text-red-500 mt-1">{uploadError}</p>
              )}
              {!isUploading && !uploadError && !uploadSuccess && (
                <p className="text-xs text-blue-500 mt-1">Image will appear in slide preview</p>
              )}
              {uploadSuccess && (
                <p className="text-xs text-green-500 mt-1">âœ“ Image processed successfully!</p>
              )}
            </div>
        )}
      </div>
    </div>
  )
} 